/****************************************************************************
File name	: iniparser.h
Author		: m001602
Version		: V1.0	
Date		: 2018.09.25
Description	: ini配置文件的写入，读取，解析头文件
Others		: 无
History		:
****************************************************************************/

#ifndef __INI_PARSER_H__
#define __INI_PARSER_H__

#ifdef __cplusplus
extern "C" {
#endif

#include "typedef.h"

#ifdef INI_PARSER_C
#define INI_PARSER_PUBLIC
#define INI_PARSER_CONST
#else
#define INI_PARSER_PUBLIC extern
#define INI_PARSER_CONST  const
#endif

#define NON_FATFS	0	// 1:不使用FATFS, 0:使用FATFS

#define MAX_VALUE  	32	/* 定义section,key,value字符串最大长度 */

#ifndef true
#define true ((unsigned char)1)
#endif

#ifndef false
#define false ((unsigned char)0)
#endif

typedef struct _option {
  char    key[MAX_VALUE];   	/* 对应键 */
  char    value[MAX_VALUE]; 	/* 对应值 */
  struct  _option *next;    	/* 链表连接标识 */
} INI_OPTION_ST;

typedef struct _data {
  char    section[MAX_VALUE]; 	/* 保存section值    */
  INI_OPTION_ST  *option;       /* option链表头     */
  struct  _data *next;        	/* 链表连接标识        */
} INI_DATA_ST;

typedef struct {
  char    		comment;              /* 表示注释的符号    */
  char    		separator;            /* 表示分隔符        */
  char    		ret_string[MAX_VALUE]; /* 返回值字符串的值  */
  int     		ret_int;               /* 返回int的值       */
  unsigned char ret_bool;        /* 返回bool的值      */
  double  		ret_double ;           /* 返回double类型    */
  INI_DATA_ST   *data;         /* 保存数据的头      */
} INI_CONFIG_ST;				/* ini配置文件结构体 */

/**
* 初始化ini配置结构体
* 参数: 无
* 返回INI_CONFIG_ST结构体链表头指针
**/
INI_PARSER_PUBLIC INI_CONFIG_ST *ini_initial_config(void);

/**
* 向链表添加section,key,value
* 如果添加时不存在section则新增一个
* 如果对应section的key不存在则新增一个
* 如果section已存在则不会重复创建
* 如果对应section的key已存在则只会覆盖key的值
**/
INI_PARSER_PUBLIC unsigned char ini_add_option(INI_CONFIG_ST *pstIniCfg, const char *section, const char *key, const char *value);

/**
* 获取指定类型的值
* 根据不同类型会赋值给对应值
* 本方法需要注意,int和double的转换,不满足就是0
*     需要自己写代码时判断好
**/
INI_PARSER_PUBLIC unsigned char ini_get_value(INI_CONFIG_ST *pstIniCfg, const char *section, const char *key);

/**
* 判断section是否存在
* 不存在返回空指针
* 存在则返回包含那个section的Data指针
**/
INI_PARSER_PUBLIC INI_DATA_ST *ini_has_section(INI_CONFIG_ST *pstIniCfg, const char *section);

/**
* 判断指定option是否存在
* 不存在返回空指针
* 存在则返回包含那个section下key的Option指针
**/
INI_PARSER_PUBLIC INI_OPTION_ST *ini_has_option(INI_CONFIG_ST *pstIniCfg, const char *section, const char *key);

/**
* 删除option
**/
INI_PARSER_PUBLIC unsigned char ini_remove_option(INI_CONFIG_ST *pstIniCfg, const char *section, const char *key);

/**
* 删除section
**/
INI_PARSER_PUBLIC unsigned char ini_remove_section(INI_CONFIG_ST *pstIniCfg, const char *section);

/**
* 传递配置文件路径
* 参数有文件路径,注释字符,分隔符
* 返回INI_CONFIG_ST结构体指针
**/
INI_PARSER_PUBLIC INI_CONFIG_ST *ini_read_config(INI_CONFIG_ST *pstIniCfg, const char *filename, char comment, char separator);

/**
* 将INI_CONFIG_ST对象写入指定文件中
* header表示在文件开头加一句注释
* 写入成功则返回true
**/
INI_PARSER_PUBLIC unsigned char ini_write_file(INI_CONFIG_ST *pstIniCfg, const char *filename, const char *header);

/**
*  注销注销INI_CONFIG_ST节点指向的内存,以及ini数据节点链表对应的所有data节点和option节点内存
**/
INI_PARSER_PUBLIC unsigned char ini_destroy_config(INI_CONFIG_ST *pstIniCfg);

/**
* 打印当前ini配置文件中的所有对象信息
**/
INI_PARSER_PUBLIC void print_ini_all_info(INI_CONFIG_ST *pstIniCfg);

/**
* 基于FATFS文件系统的ini配置文件测试用例
**/
INI_PARSER_PUBLIC void ini_parser_test(void);

#ifdef __cplusplus
}
#endif /* extern "C" */

#endif /*end of  __LOGICAL_DRIVE_H__*/

